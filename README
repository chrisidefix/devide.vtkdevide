Current ITK/VTK notes
---------------------

*****
As of 20031201: Rude bug with CVS ITK, VTK and DICOMParser.  Both ITK and VTK
use the same DICOMParser and it seems that the wrong code is being executed
at dynamic linking due to symbols being identical.  See my posting:
http://www.itk.org/pipermail/insight-users/2003-December/005716.html

Temporary fix: comment out DICOM thingies in RegisterBuiltInFactories() in
Code/IO/itkImageIOFactory.cxx

*****
As of 20031213:
If you want to use ITK along with VTK-CVS
please do the following:

1) go to
Insight/Code/BasicFilters/itkVTKImageImport.h
and uncomment/comment lines 79-82.  (VTKSpacingType, VTKOriginType)

2) then go to
Insight/Code/BasicFilters/itkVTKImageExportBase.h
and uncomment/comment lines 52-55. (VTKSpacingType, VTKOriginType)


Getting this to build in Visual C++ 6.0
---------------------------------------

General
-------

- If you're going to build a Debug release, you'll notice a missing
  python22_d.lib.  To workaround this if you don't really need debugging in
  the python library, edit pyconfig.h: change the ref to python22_d.lib to
  just python22.lib and comment out #define Py_DEBUG

Your VTK build
--------------

- You're going to build with Python wrapping, so you need Tcl installed.  
  Makes sense, doesn't it?  Because Python 2.2.3 itself makes use of tcl/tk
  8.3, I installed ActiveTcl 8.3.5.0-2 (from activestate.com); most of the tk 
  thingies required by cmake are in f:\tcl\include and lib.  TK_INTERNAL_PATH
  is of course in the VTK/Rendering/tkInternals/tk<version>.

- VERY important: make sure that VTK_USE_ANSI_STDLIB is set to ON in your
  VTK cmake configuration!


The vtkdscas config
-------------------

- Add wsock32.lib and netapi32.lib to the standard libraries
  (CMAKE_STANDARD_LIBRARIES).  Both HDF and DCMTK require this.
  NOTE: this is not necessary anymore; I've changed the cmake config so it's
  clever enough to do this by itself.

- Use the dlllib subdirectory of the HDF installation: VTK and also vtkdscas
  are compiled with /MD (multi-threaded and DLL support)

- Also modify the dcmtk project in MSVC++ to use /MD and not /MT.  You only
  have to build ofstd and dcmdata
